// Code generated by MockGen. DO NOT EDIT.
// Source: ./solver/analyser.go

// Package solver_mock is a generated GoMock package.
package solver_mock

import (
	solver "github.com/abdulrahmank/solver/tic_tac_toe/solver"
	ttt "github.com/abdulrahmank/solver/tic_tac_toe/ttt"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAnalyser is a mock of Analyser interface
type MockAnalyser struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyserMockRecorder
}

// MockAnalyserMockRecorder is the mock recorder for MockAnalyser
type MockAnalyserMockRecorder struct {
	mock *MockAnalyser
}

// NewMockAnalyser creates a new mock instance
func NewMockAnalyser(ctrl *gomock.Controller) *MockAnalyser {
	mock := &MockAnalyser{ctrl: ctrl}
	mock.recorder = &MockAnalyserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnalyser) EXPECT() *MockAnalyserMockRecorder {
	return m.recorder
}

// GetCellWiseWinProbability mocks base method
func (m *MockAnalyser) GetCellWiseWinProbability(b ttt.Board, c ttt.BoardCharacter) map[ttt.Cell]solver.CellStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCellWiseWinProbability", b, c)
	ret0, _ := ret[0].(map[ttt.Cell]solver.CellStatus)
	return ret0
}

// GetCellWiseWinProbability indicates an expected call of GetCellWiseWinProbability
func (mr *MockAnalyserMockRecorder) GetCellWiseWinProbability(b, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCellWiseWinProbability", reflect.TypeOf((*MockAnalyser)(nil).GetCellWiseWinProbability), b, c)
}
